plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'com.cookpad.android.plugin.license-tools' version '1.2.8'
    id 'org.jetbrains.kotlin.plugin.serialization' version "$kotlin_version"
    id 'com.google.devtools.ksp' version '1.7.20-1.0.8'
}

android {
    compileSdkVersion 33
    ndkVersion "24.0.8215888"

    defaultConfig {
        applicationId "com.osfans.trime"
        minSdkVersion 21 // 21 is required for `readlinkat` for capnpproto
        targetSdkVersion 29
        versionCode 20230501
        versionName "3.2.12"

        multiDexEnabled true
        setProperty("archivesBaseName", "trime-$versionName")
        buildConfigField "String", "BUILD_GIT_HASH", "\"${gitHashShort}\""
        buildConfigField "String", "BUILD_GIT_REPO", "\"${gitRemoteUrl}\""
        buildConfigField "String", "BUILD_VERSION_NAME", "\"${gitVersionName}\""
        buildConfigField "String", "BUILD_INFO", "\"${buildInfo}\""
    }

    signingConfigs {
        release {
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            //proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-android.txt'
            signingConfig signingConfigs.release
        }
    }

    // Use prebuilt JNI library if the 'app/prebuilt' exists
    //
    // Steps to generate the prebuilt directory:
    // $ ./gradlew app:assembleRelease
    // $ cp --recursive app/build/intermediates/stripped_native_libs/universalRelease/out/lib app/prebuilt
    if (file("prebuilt").exists()) {
        sourceSets.main.jniLibs.srcDirs = ['prebuilt']
    } else {
        externalNativeBuild.cmake.path = "src/main/jni/CMakeLists.txt"
    }

    def propsFile = rootProject.file('keystore.properties') //store release config in keystore.properties
    def configName = 'release'

    if (propsFile.exists() && android.signingConfigs.hasProperty(configName)) {
        def props = new Properties()
        props.load(new FileInputStream(propsFile))
        if (props!=null && props.containsKey('storeFile')) {
            android.signingConfigs[configName].storeFile = rootProject.file(props['storeFile'])
            android.signingConfigs[configName].storePassword = props['storePassword']
            android.signingConfigs[configName].keyAlias = props['keyAlias']
            android.signingConfigs[configName].keyPassword = props['keyPassword']
        }
    }

    buildFeatures {
        viewBinding true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    
    kotlinOptions {
        jvmTarget = '1.8'
    }

    externalNativeBuild {
        cmake {
            version "3.22.1"
        }
    }

    splits {
        // Configures multiple APKs based on ABI.
        abi {
            // Enables building multiple APKs per ABI.
            enable true

            // By default all ABIs are included, so use reset() and include to specify that we only
            // want APKs for x86 and x86_64.

            // Resets the list of ABIs that Gradle should create APKs for to none.
            reset()

            // Specifies a list of ABIs that Gradle should create APKs for.
            include "x86", "x86_64", "armeabi-v7a", "arm64-v8a"

            // Specifies that we do not want to also generate a universal APK that includes all ABIs.
            universalApk false
        }
    }
}

kotlin {
    sourceSets.configureEach {
        kotlin.srcDir("$buildDir/generated/ksp/$name/kotlin/")
    }
}

ksp {
    arg "room.schemaLocation", "$projectDir/schemas"
}

android.applicationVariants.all {
    def variantName = name.capitalize()
    tasks.findByName("merge${variantName}Assets")?.dependsOn(generateLicenseJson)
}

dependencies {
    ksp project(":codegen")
    implementation "com.blankj:utilcodex:1.31.1"
    implementation "com.jakewharton.timber:timber:5.0.1"
    implementation "cat.ereza:customactivityoncrash:2.4.0"
    implementation "com.github.getActivity:XXPermissions:16.2"
    implementation "com.charleskorn.kaml:kaml:0.49.0"
    implementation "androidx.core:core-ktx:1.9.0"
    implementation "androidx.appcompat:appcompat:1.5.1"
    implementation "androidx.preference:preference-ktx:1.2.0"
    implementation "androidx.constraintlayout:constraintlayout:2.1.4"
    implementation "androidx.viewpager2:viewpager2:1.0.0"
    implementation "androidx.fragment:fragment-ktx:1.5.4"
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlin_coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$kotlin_coroutines_version"
    implementation 'org.jetbrains.kotlinx:kotlinx-serialization-json:1.4.1'
    implementation "com.google.android.flexbox:flexbox:3.0.0"
    implementation "com.louiscad.splitties:splitties-bitflags:$splitties_version"
    implementation "com.louiscad.splitties:splitties-systemservices:$splitties_version"
    implementation "com.louiscad.splitties:splitties-views-dsl:$splitties_version"
    implementation "com.louiscad.splitties:splitties-views-dsl-constraintlayout:$splitties_version"
    implementation "com.louiscad.splitties:splitties-views-dsl-recyclerview:$splitties_version"
    implementation "com.louiscad.splitties:splitties-views-recyclerview:$splitties_version"
    implementation "androidx.room:room-runtime:$room_version"
    ksp "androidx.room:room-compiler:$room_version"
    implementation "androidx.room:room-ktx:$room_version"

    // Testing
    testImplementation "junit:junit:4.13.2"
    androidTestImplementation "junit:junit:4.13.2"
}

static String exec(String cmd) {
    def process = cmd.execute()
    process.waitFor()
    if (process.exitValue() == 0) {
        return process.text.trim()
    } else {
        // not a valid command
        return ""
    }
}

static String getGitHashShort() {
    return exec("git rev-parse --short HEAD")
}

static String getGitRemoteUrl() {
    return exec("git remote get-url origin")
            .replaceFirst("^git@github\\.com:", "https://github.com/")
            .replaceFirst("\\.git\$", "")
}

static String getGitVersionName() {
    return exec("git describe --tags --long --always")
}

static String getGitWorkingOrCIBranch() {
    def branch = exec("git symbolic-ref --short HEAD")
    if (branch.isBlank()) { return System.getenv("CI_BRANCH") }
    else { return branch }
}

static String getGitUserOrCIName() {
    def name = exec("git config user.name")
    if (name.isBlank()) { return System.getenv("CI_NAME") }
    else { return name }
}

static String getBuildInfo() {
    def writer = new StringWriter()
    def time = new Date().format("yyyy-MM-dd HH:mm",
            TimeZone.getTimeZone("UTC"))
    writer.append("Builder: ${gitUserOrCIName}\\n")
    writer.append("Build Time: ${time} UTC\\n")
    writer.append("Build Version Name: ${gitVersionName}\\n")
    writer.append("Git Hash: ${gitHashShort}\\n")
    writer.append("Git Branch: ${gitWorkingOrCIBranch}\\n")
    writer.append("Git Repo: ${gitRemoteUrl}")
    def info = writer.toString()
    println(info)
    return info
}
